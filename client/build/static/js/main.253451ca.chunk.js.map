{"version":3,"sources":["utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","assets/spinner.gif","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","utils/reducers.js","utils/store.js","utils/GlobalState.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_PRODUCTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","CLEAR_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ProductItem","item","dispatch","useDispatch","state","useSelector","image","price","quantity","cart","className","to","alt","src","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","initialState","createStore","action","newState","StoreProvider","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.253451ca.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\n// new stuff for redux \nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductItem(item) {\n  //const [state, dispatch] = useStoreContext();\n\n  // redux refactor \n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\n\n// new stuff for redux \nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductList() {\n // const [state, dispatch] = useStoreContext();\n\n  // redux refactor \n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n//import { useStoreContext } from '../../utils/GlobalState';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\n// new stuff for redux \nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n // const [state, dispatch] = useStoreContext();\n\n  // redux refactor \n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\n// only need to import dispatch hook\nimport { useDispatch } from 'react-redux';\n\nconst CartItem = ({ item }) => {\n  // redux refactor, use dispatch hook\n  const dispatch = useDispatch();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\n\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\n\n// import useDispatch and useSelector \nimport { useDispatch, useSelector } from 'react-redux';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  // redux refactor \n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Cart from '../components/Cart';\n//import { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\n// new stuff for redux \nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction Detail() {\n  // redux refactor \n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  //const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n// moved initial state into this file \nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n};\n\n// set initial state as default\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    default:\n      return state;\n  }\n};","// create redux store, use reducers defined in reducers.js\nimport { createStore } from 'redux';\n\nimport { reducer } from './reducers';\n\nexport default createStore(reducer);\n","// refactored for redux: bring in store from store.js\n// export provider component to wrap app with\nimport React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\n\nexport default function StoreProvider(props) {\n  return <Provider store={store} {...props} />;\n}","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\n\n// use same import from GlobalState for redux\nimport StoreProvider from './utils/GlobalState';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}